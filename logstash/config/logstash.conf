input {
	tcp {
		port => 5000
		type => analytic_logs
		codec => multiline {
	      pattern => "^\["
	      negate => true
	      what => "previous"
	    }
	}

	tcp {
		port => 5001
	}

}

# # Add your filters here

filter {
	if [type] == "analytic_logs" {
		mutate {
			gsub => [ "message", "\t", " ", "message", "\n", " " ]
		}

		## Matching multi line
		grok {
		    match => [ "message", "(?m)\[%{GREEDYDATA:machineName}] \[%{LOGLEVEL:loglevel}\] %{TIMESTAMP_ISO8601:logTimestampString} " ]
		    overwrite => [ "message" ]
		}

		## Maching QueryStatsSummary lines of log and extracting data
		grok {
			pattern => ["\[%{JAVACLASS:javaclass}\] \[%{GREEDYDATA:runnerName}\] \[%{UUID:previousCorrelationId}?\] - ",
						"\[Partition:%{WORD:partitionId}\]",
						"\[Source:%{GREEDYDATA:logSource}?\]",
						"\[UserName:%{WORD:userName}?\]",
						"\[ClientAddress:/%{HOSTPORT:clientAddress}?\]",
						"\[Request:%{GREEDYDATA:request}\]",
						"\[RowsCount:%{BASE10NUM:rowsCount:int}\]",
						"\[ServerElapsedTime:%{BASE10NUM:serverElapsedTime:int}?\]",
						"\[PacketExchangeElapsedTime:%{BASE10NUM:packetExchangeElapsedTime:int}?\]",
						"\[TotalElapsedTime:%{BASE10NUM:totalElapsedTime:int}\]",
						"\[CorrelationId:%{UUID:correlationId}?\]",
						"\[(?<server_version>CServer[^\s]*)\]$",
						"~\[(?<java_version>CServer[^\s]*)\]",
						"\] - (?<stacktrace>Unex.*$)",
						"\] - %{GREEDYDATA:uncategorized_line}",
						"(%{GREEDYDATA:unparsed_line})?"]
			break_on_match => false
		}
		
		## Converting string datetime to timestamp
		date {
			match => ["logTimestampString", "YYYY-MM-dd HH:mm:ss,SSS"]
			target => "@logTimestamp"
		}		
	} else {
		xml {
			source => "message"
			target => "parsed"
		}
		split {
			field => "[parsed][testcase]"
			add_field => {
				id => "%{[parsed][testcase][name]}-%{[parsed][timestamp]}"
				name => "%{[parsed][testcase][name]}"
				classname => "%{[parsed][testcase][classname]}"
				duration => "%{[parsed][testcase][time]}"
				beginTimestamp => "%{[parsed][timestamp]}"
				target => "testcase"
			}
		}
		mutate {
			convert => {
				"duration" => "float"
			}
			# # get rid of the extra fields we don't need
			remove_field => ["message", "parsed", "host", "port"]
		}
		date {
			locale => "en"
			match => ["beginTimestamp", "YYYY-MM-dd'T'HH:mm:ss"]
			timezone => "America/Los_Angeles"
			target => "beginTimestamp"
		}
	}
}


# # Add your filters here

output {
	if [type] == "analytic_logs" {
		elasticsearch {
			hosts => "elasticsearch:9200"
		}
	}
	else  {
		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "regression-tests-%{+YYYY.MM.dd}"
		}
		stdout { codec => rubydebug }
 	}
}